html
  head
    meta(charset='UTF-8')
    meta(name="viewport", content="width=device-width, initial-scale=1, shrink-to-fit=no")
    link(rel="stylesheet", href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css", 
      integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous")
    title= mytitle
  body
    nav(class="navbar navbar-dark bg-dark")
      span(class="navbar-brand mb-0 h1") Application Assistant
    div(id='container1' class="container-fluid bg-secondary" style="height:100%")
      div(class="row")
        div(class="col-sm-6 mt-3")
          div(class="card text-black mb-3"  style="height:90%; overflow-y:scroll;")
            div(class="card-header")
              ul(class="nav nav-tabs card-header-tabs")
                li.nav-item
                  a(class="nav-link" v-bind:class="{ active: show_status_card == 0 }" 
                    v-on:click.stop.prevent="show_status_card=0") Dialog Analysis 
                    span(class="badge badge-success" v-if="entities.length > 0") {{entities.length}}
                li.nav-item
                  a(class="nav-link" v-bind:class="{ active: show_status_card == 1 }" 
                    v-on:click.stop.prevent="show_status_card=1") Screen Shots 
                    span(class="badge badge-success" v-if="screenshots.length > 0") {{screenshots.length}}
                li.nav-item
                  a(class="nav-link" v-bind:class="{ active: show_status_card == 2 }"
                    v-on:click.stop.prevent="show_status_card=2") Action Status 
                    span(class="badge badge-success" v-if="action_status.length > 0") {{action_status.length}}
            div(class="card-body" v-if="show_status_card == 0")
              template(v-if="intents.length > 0")
                h5.card-title Intents
                p.card-text(v-for="intent in intents") {{intent.intent}}({{intent.confidence}})
              template(v-if="entities.length > 0")
                h5.card-title Entities
                p.card-text(v-for="entity in entities") {{entity.entity}}:{{entity.input}}->{{entity.value}}({{entity.confidence}})
    
            div(class="card-body"  v-if="show_status_card == 1")
              div(id="carouselExampleIndicators" class="carousel slide" data-ride="carousel" v-if="screenshots.length > 0")
                ol(class="carousel-indicators")
                  li(data-target="#carouselExampleIndicators" v-for="(screen, index) in screenshots" v-bind:data-slide-to="index" 
                    v-bind:class="{ active: index == screenshots.length-1}")
                div(class="carousel-inner")
                  template(v-for="(screen, index) in screenshots")
                    div(class="carousel-item" v-bind:class="{ active: index == screenshots.length-1}")
                      img(class="d-block w-100" v-bind:src="'/dialog/img?fname='+screen.screen" v-on:click="preview_screen('/dialog/img?fname='+screen.screen)")
                a(class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev")
                  span(class="carousel-control-prev-icon" aria-hidden="true")
                  span(class="sr-only")  Previous
                a(class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next")
                  span(class="carousel-control-next-icon" aria-hidden="true")
                  span(class="sr-only") Next
                  
            div(id="status_list" class="card-body"  v-if="show_status_card == 2" style="overflow-y:scroll;")
              ul(class="list-group  list-group-flush")
                li(class="list-group-item" v-for="act in action_status") {{act.text}}
        div(class="col-sm-6 mt-3" style="height:90%")
          div(class="card  bg-light" style="height:90%")
            h5(class="card-header") Dialog
              button(type="button" class="btn btn-outline-primary float-right" v-on:click="ws_dialog_reset") Reset
            div(id="msg_list" class="card-body" style="overflow-y:scroll;")
              ul(class="list-group  list-group-flush")
                li(class="list-group-item" v-for="msg in messages"
                 v-bind:style="{'text-align':msg.is_input?'right':'left'}")
                  template(v-if="msg.withentity == true")
                    span(v-for="span in msg.spans" 
                      v-bind:style="{'text-decoration':span.isentity?'underline':'none'}") {{span.text}}
                  template(v-else)
                    span {{msg.text}}

          div(class="card  bg-light")
            div(class="input-group")
              div(class="input-group-prepend")
                span(class="input-group-text" id="basic-addon1") >
              input(type="text" class="form-control" placeholder="start typing here..." 
                aria-describedby="basic-addon1"
                v-model="input_text"
                @keyup.enter="ws_sub_input"
                @keyup.up="sel_msg_log_up"
                @keyup.down="sel_msg_log_down")
    div(class="screen_preview_modal modal fade" tabindex="-1" role="dialog")
      div(class="modal-dialog modal-lg" role="document" style="max-width:90%")
        div(class="modal-content")
          div(class="modal-header")
            h5(class="modal-title") Screen Shot
            button(type="button" class="close" data-dismiss="modal" aria-label="Close")
              span(aria-hidden="true") &times
          div(class="modal-body")
            img(id='preview_img' class="img-responsive" style="width:100%" src="")
          div(class="modal-footer")
            button(type="button" class="btn btn-secondary" data-dismiss="modal") Close
    div(class="sso_modal modal fade" tabindex="-1" role="dialog")
      div(class="modal-dialog" role="document")
        div(class="modal-content")
          div(class="modal-header")
            h5(class="modal-title") Login with SSO
            button(type="button" class="close" data-dismiss="modal" aria-label="Close")
              span(aria-hidden="true") &times
          div(class="modal-body")
            div(class="form-group")
              label(for="username" class="col-form-label") User Name:
              input(type="text" class="form-control" id="username")
            div(class="form-group")
              label(for="pwd" class="col-form-label") Password:
              input(type="password" class="form-control" id="pwd")
          div(class="modal-footer")
            button(type="button" class="btn btn-secondary" data-dismiss="modal") Login
    
    script(src="https://code.jquery.com/jquery-3.3.1.min.js" 
      integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT" 
      crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" 
      integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" 
      crossorigin="anonymous")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" 
      integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" 
      crossorigin="anonymous")
    script(src="https://cdn.bootcss.com/vue/2.5.16/vue.js")
    script(src="https://cdn.bootcss.com/socket.io/2.1.1/socket.io.js")
    script(type='text/javascript').
      function genEntityString(input, entities) {
        var spans = []
        
        var last = 0
        if (entities) {
          entities.forEach(function(entity) {
            var loc = entity.location
            if (last < loc[0]) {
              spans.push({text:input.substring(last, loc[0]), isentity:false})
            } 
            
            if (loc[0] < last) {//overlapped entity, jump it.
              last = last < loc[1]?last:loc[1]
            } else {
              spans.push({text:input.substring(loc[0], loc[1]), isentity:true})
              last = loc[1]
            }
          })
        }
        if (last < input.length) {
          spans.push({text:input.substring(last), isentity:false})
        }
        
        return {withentity:true, spans:spans, is_input:true}
      }
      
      function scrolltobottom(elname) {
        setTimeout(function(){//scroll the list to the end
          var msg_list = document.getElementById(elname)
          if (msg_list)
            msg_list.scrollTop = msg_list.scrollHeight})
      }
      
      var msgLogger = {
        cur_index: null,
        name:'msglogger',
        addMsgLog: function(text) {
          var val = sessionStorage.getItem(this.name)
          var logs
          if (!val)
            logs = []
          else
            logs = JSON.parse(val)
            
          logs.push(text)
          sessionStorage.setItem(this.name, JSON.stringify(logs))
          this.cur_index = null
        },
        getPreviousMsgLog: function (){
          
          if (this.cur_index < 0) {
            this.cur_index = null
            return ''
          }
            
          var val = sessionStorage.getItem(this.name)
          if (!val)
            return ''
            
          var logs = JSON.parse(val)
          
          if (this.cur_index == null)
            this.cur_index = logs.length-1
            
          return logs[this.cur_index--]
        },
        getNextMsgLog: function (){
          var val = sessionStorage.getItem(this.name)
          if (!val)
            return ''
            
          var logs = JSON.parse(val)

          if (this.cur_index == null)
            this.cur_index = 0
            
          if (this.cur_index == logs.length) {
            this.cur_index = null
            return ''
          }
          
          return logs[this.cur_index++]
        }
      }
      
      function processEntitites(array, input) {
        for (var i in array) {
          array[i].confidence = Math.round(array[i].confidence*100)/100
          array[i].input = input.substring(array[i].location[0], array[i].location[1])
        }
        
        return array
      }
      var app = new Vue({
        el: '#container1',
        data: {
          messages:[],
          input_text:"",
          intents:[],
          entities:[],
          action_status:[],
          screenshots:[],
          show_status_card:0
        },
        watch: {
          messages: function(val) {
            scrolltobottom('msg_list')
          },
          action_status: function(val) {
            scrolltobottom('status_list')
          }
        },
        methods: {
          sel_msg_log_up: function(event) {
            this.input_text = msgLogger.getPreviousMsgLog()
          },
          sel_msg_log_down: function(event){
            this.input_text = msgLogger.getNextMsgLog()
          },
          preview_screen: function(img_url) {
            $('#preview_img').attr("src", img_url)
            $('.screen_preview_modal').modal()
          },
          ws_sub_input: function(event) {
            console.log('ws user input:'+this.input_text)
            var input = this.input_text            
            this.input_text = ''
            
            if (input.trim() != '') {
              this.messages.push({text:input,is_input:true})
              msgLogger.addMsgLog(input)
            }
            wsSendInputMessage({input:input, client_seq:this.messages.length-1})
            
          },
          ws_dialog_reset: function(event) {
            ws_socket.emit('dialog.reset', {})
            this.input_text = ''
            this.messages = []
            this.intents = []
            this.entities = []
            this.action_status = []
            this.screenshots = []
          },
          sub_input: function(event) {
            console.log('user input:'+this.input_text)
            
            var input = this.input_text
            $.ajax({
                type:'POST',
                url:'say',
                data:JSON.stringify({input:input}),
                async:true,
                success:function(res){
                    if (res.ok == undefined || res.ok == false) {
                      console.log('response error')
                      return
                    }
                        
                    if (res.input && res.input.text) {
                      app.intents = res.intents
                      app.entities = res.entities
                      app.messages.push(genEntityString(res.input.text, res.entities))
                    } else if (input) {
                      app.message.push({text:input,is_input:true})
                    }
                    
                    app.messages.push({text:'@:'+res.output})
                    
                    setTimeout(function(){//scroll the list to the end
                      var msg_list = document.getElementById('msg_list')
                      msg_list.scrollTop = msg_list.scrollHeight
                    })
                },
                contentType:"application/json; charset=utf-8",
                dataType:'json'
            })
            
            this.input_text = ''
          }
        }
      })
      
      var ws_socket = null
      function beginWSocket() {
        ws_socket = io('/dialog')
        
        ws_socket.on('action.status', (res) => {
          console.log('ws received:'+JSON.stringify(res))
          app.action_status.push({text:res.text})
          app.show_status_card = 2
          if (res.screen) {
            app.screenshots.push(res)
            app.show_status_card = 1
          }
        })
        
        ws_socket.on('dialog.login', (res) => {
          $('#username').val(''), $('#pwd').val('')
          $('.sso_modal').modal()
          $('.sso_modal').on('hidden.bs.modal', function (e) {
            ws_socket.emit('dialog.login.response', {username:$('#username').val(),password:$('#pwd').val()})
          })
        })
        
        ws_socket.on('dialog.output', (res) => {
            if (res.ok == undefined || res.ok == false) {
              console.log('response error')
              return
            }
            
            console.log('dialog.output:'+JSON.stringify(res))
            if (res.input && res.input.text) {
              app.intents = res.intents
              app.entities = processEntitites(res.entities, res.input.text)
                if (-1 < res.client_seq) {
                    app.messages[res.client_seq] = genEntityString(res.input.text, res.entities)
                } else {
                    app.messages.push(genEntityString(res.input.text, res.entities))
                }
            }
        
            app.messages.push({text:'@:'+res.output})
        })
      }
      
      function wsSendInputMessage(msg) {
        ws_socket.emit('dialog.input', msg)
      }
      
      $(document).ready(function(){
        //app.sub_input.apply(app)
        beginWSocket()
      })