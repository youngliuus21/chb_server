html
  head
    meta(charset='UTF-8')
    meta(name="viewport", content="width=device-width, initial-scale=1, shrink-to-fit=no")
    link(rel="stylesheet", href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css", 
      integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous")
    title= mytitle
  body
    nav(class="navbar navbar-dark bg-dark")
      span(class="navbar-brand mb-0 h1") Application Assistant
    div(id='container1' class="container-fluid bg-secondary" style="height:100%")
      div(class="row")
        div(class="col-sm-6 mt-3")
          div(class="card text-white bg-info mb-3")
            div(class="card-header")
              ul(class="nav nav-tabs card-header-tabs")
                li.nav-item
                  a(class="nav-link active" href="#") Dialog Status
                li.nav-item
                  a(class="nav-link" href="#") Screen Shots
                li.nav-item
                  a(class="nav-link active" href="#") Action Status
            div(class="card-body")
              template(v-if="intents.length > 0")
                h5.card-title Intents
                p.card-text(v-for="intent in intents") {{intent.intent}}({{intent.confidence}})
              template(v-if="entities.length > 0")
                h5.card-title Entities
                p.card-text(v-for="entity in entities") {{entity.entity}}:{{entity.value}}({{entity.confidence}})
    
          div(class="card text-white bg-info mb-3")
            h5(class="card-header") Screen Output
            div(class="card-body") Screen
          div(class="card")
            h5(class="card-header") Action Status
            div(class="card-body"  style="overflow-y:scroll;")
              ul(class="list-group  list-group-flush")
                li(class="list-group-item" v-for="act in action_status") {{act.text}}
        div(class="col-sm-6 mt-3" style="height:90%")
          div(class="card  bg-light" style="height:90%")
            h5(class="card-header") Dialog
              button(type="button" class="btn btn-outline-primary float-right") Reset
            div(id="msg_list" class="card-body" style="overflow-y:scroll;")
              ul(class="list-group  list-group-flush")
                li(class="list-group-item" v-for="msg in messages"
                 v-bind:style="{'text-align':msg.is_input?'right':'left'}")
                  template(v-if="msg.withentity == true")
                    span(v-for="span in msg.spans" 
                      v-bind:style="{'text-decoration':span.isentity?'underline':'none'}") {{span.text}}
                  template(v-else)
                    span {{msg.text}}

          div(class="card  bg-light")
            div(class="input-group")
              div(class="input-group-prepend")
                span(class="input-group-text" id="basic-addon1") >
              input(type="text" class="form-control" placeholder="start typing here..." 
                aria-describedby="basic-addon1"
                v-model="input_text"
                @keyup.enter="sub_input")
    
    script(src="https://code.jquery.com/jquery-3.3.1.min.js" 
      integrity="sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI/8aZajjp4Bqd+V6D5IgvKT" 
      crossorigin="anonymous")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" 
      integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" 
      crossorigin="anonymous")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js" 
      integrity="sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB/pTJ0euyQp0Mk8ck+5T" 
      crossorigin="anonymous")
    script(src="https://cdn.bootcss.com/vue/2.5.16/vue.js" integrity="sha384-uDHwRgVGzCbHUyl2dKQHqgCAab0OIx/w9PqT3pvjaX/ZGARjKanO5mJGjmdixblb" crossorigin="anonymous")
    script(src="https://cdn.bootcss.com/socket.io/2.1.1/socket.io.js" 
      integrity="sha384-l5mJc3Z+1vy9cW5SL9rsLY7Lj0t9oELCwHOEXCC11hCf119un/8RwSFp99rwgIyo" 
      crossorigin="anonymous")
    script(type='text/javascript').
      function genEntityString(input, entities) {
        var spans = []
        
        var last = 0
        if (entities) {
          entities.forEach(function(entity) {
            var loc = entity.location
            if (last < loc[0]) {
              spans.push({text:input.substring(last, loc[0]), isentity:false})
            }
          
            spans.push({text:input.substring(loc[0], loc[1]), isentity:true})
            last = loc[1]
          })
        }
        if (last < input.length) {
          spans.push({text:input.substring(last), isentity:false})
        }
        
        return {withentity:true, spans:spans, is_input:true}
      }
      
      var app = new Vue({
        el: '#container1',
        data: {
          messages:[],
          input_text:"",
          intents:[],
          entities:[],
          action_status:[],
          show_status_card:0
        },
        methods: {
          sub_input: function(event) {
            console.log('user input:'+this.input_text)
            
            var input = this.input_text
            $.ajax({
                type:'POST',
                url:'say',
                data:JSON.stringify({input:input}),
                async:true,
                success:function(res){
                    if (res.ok == undefined || res.ok == false) {
                      console.log('response error')
                      return
                    }
                        
                    if (res.input && res.input.text) {
                      app.intents = res.intents
                      app.entities = res.entities
                      app.messages.push(genEntityString(res.input.text, res.entities))
                    } else if (input) {
                      app.message.push({text:input,is_input:true})
                    }
                    
                    app.messages.push({text:'@:'+res.output})
                    
                    setTimeout(function(){//scroll the list to the end
                      var msg_list = document.getElementById('msg_list')
                      msg_list.scrollTop = msg_list.scrollHeight
                    })
                },
                contentType:"application/json; charset=utf-8",
                dataType:'json'
            })
            
            this.input_text = ''
          }
        }
      })
      
      var ws_socket = null
      function beginWSocket() {
        ws_socket = io('/dialog')
        
        ws_socket.on('action.status', (res) => {
          console.log('ws received:'+JSON.stringify(res))
          app.action_status.push({text:res.text})
        })
      }
      
      $(document).ready(function(){
        //app.sub_input.apply(app)
        beginWSocket()
      })